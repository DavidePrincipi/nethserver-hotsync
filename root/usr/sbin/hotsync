#!/bin/bash
#
# Copyright (C) 2013-2015 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# Wed Feb 06 2013 Stefano Fancello <stefano.fancello@nethesis.it>
# Fri Jun 12 2015 Filippo Carletti <filippo.carletti@nethesis.it>
#

# source configuration file
[ -f /etc/hotsync.conf ] && source /etc/hotsync.conf

#Use default ssh port if none configured
if [[ -z ${REMOTE_SSH_PORT} ]] ; then
    REMOTE_SSH_PORT=22
fi

if [[ -z "$REMOTE_HOST" ]] ; then
    echo "ERROR: remote host is not configured" >&2  
    exit 1
fi

/usr/bin/ssh -o "ConnectTimeout=10" -o "PreferredAuthentications=publickey" -p ${REMOTE_SSH_PORT} root@${REMOTE_HOST} "exit 76" 2>/dev/null
if [[ $? != "76" ]] ; then
    echo "ERROR: connection for root@${REMOTE_HOST} is not configured properly. Use hotsync-setup" >&2
    exit 1
fi

# lock - code taken from yum-cron
# if hot sync is scheduled too often, lock prevents concurrent runs

LOCKDIR=/var/lock/hotsync-cron.lock
LOCKFILE=$LOCKDIR/pidfile
# Try mkdir for the lockfile, will test for and make it in one atomic action
if mkdir $LOCKDIR 2>/dev/null; then
  # store the current process ID in there so we can check for staleness later
  echo "$$" >"${LOCKFILE}"
  # and clean up locks and tempfile if the script exits or is killed  
  trap "{ rm -f $LOCKFILE; rmdir $LOCKDIR 2>/dev/null; exit 255; }" INT TERM EXIT
else
  # lock failed, check if process exists.  First, if there's no PID file
  # in the lock directory, something bad has happened, we can't know the
  # process name, so clean up the old lockdir and restart
  if [ ! -f $LOCKFILE ]; then
    rmdir $LOCKDIR 2>/dev/null
    echo "hotsync-cron: no lock PID, clearing and restarting myself" >&2
    exec $0 "$@"
  fi
  OTHERPID="$(cat "${LOCKFILE}")"
  # if cat wasn't able to read the file anymore, another instance probably is
  # about to remove the lock -- exit, we're *still* locked
    if [ $? != 0 ]; then
      echo "hotsync-cron: lock failed, PID ${OTHERPID} is active" >&2
      exit 0
    fi
    if ! kill -0 $OTHERPID &>/dev/null; then
      # lock is stale, remove it and restart
      echo "hotsync-cron: removing stale lock of nonexistant PID ${OTHERPID}" >&2
      rm -rf "${LOCKDIR}"
      echo "hotsync-cron: restarting myself" >&2
      exec $0 "$@"
    else
      # Remove stale (more than two hours old) lockfiles
      find $LOCKDIR -type f -name 'pidfile' -amin +120 -exec rm -rf $LOCKDIR \;
      # if it's still there, it wasn't too old, bail
      if [ -f $LOCKFILE ]; then
        # lock is valid and OTHERPID is active - exit, we're locked!
        echo "hotsync-cron: lock failed, PID ${OTHERPID} is active" >&2
        exit 0
      else
        # lock was invalid, restart
	echo "hotsync-cron: removing stale lock belonging to stale PID ${OTHERPID}" >&2
        echo "hotsync-cron: restarting myself" >&2
        exec $0 "$@"
      fi
    fi
fi


INCLUDE_FILE=$(mktemp) || (echo "ERROR! fail creating temporary file" >&2 ; exit 1)
EXCLUDE_FILE=$(mktemp) || (echo "ERROR! fail creating temporary mysql directory"  >&2 ; exit 1)

#trap
trap "{ rm -f $LOCKFILE; rmdir $LOCKDIR 2>/dev/null; /bin/rm -f ${INCLUDE_FILE} ${EXCLUDE_FILE}; }" INT TERM EXIT

#add default backup config files
#[ -d /etc/backup-config.d ] && cat /etc/backup-config.d/*.include > ${INCLUDE_FILE}

#add default backup data files
[ -d /etc/backup-data.d ] && (cat /etc/backup-data.d/*.include >> ${INCLUDE_FILE} ;  cat /etc/backup-data.d/*.exclude >> ${EXCLUDE_FILE})

#exclude backup directory 
echo "/var/lib/nethserver/backup/" >> ${EXCLUDE_FILE}

#exclude nethserver db dir
echo "/var/lib/nethserver/db/" >> ${EXCLUDE_FILE}

#copy backup config file
echo "/var/lib/nethserver/backup/backup-config.tar.xz" >> ${INCLUDE_FILE}

#copy passwd and group file 
echo "/etc/passwd" >> ${INCLUDE_FILE}
echo "/etc/group" >> ${INCLUDE_FILE}

#copy yum configuration
cat >> ${INCLUDE_FILE} << EOF
/etc/yum/vars/serverid
/etc/yum.repos.d/
/etc/yum.conf
EOF

#copy mysql password file
echo "/etc/my.pwd" >> ${INCLUDE_FILE}

##################mysql hotsync###################
if [[ $MYSQL != 'disabled' ]]; then
  if $(rpm -q --quiet nethserver-mysql ); then 
    MYSQLTMP="/var/lib/nethserver/hotsync/mysql"
    /usr/bin/mysqlhotcopy -q -u 'root' -p "$(cat /etc/my.pwd)" --addtodest \
        $(echo -n $(/usr/bin/mysql --defaults-file=/root/.my.cnf -n -B -e "SHOW DATABASES" | grep -v '^Database$\|^information_schema$')) \
        $MYSQLTMP

    #This folder has a special rsync
    echo $MYSQLTMP >> ${EXCLUDE_FILE}

    /usr/bin/rsync ${XTRA_OPTS} -z -r -a -H -A -e "/usr/bin/ssh -p ${REMOTE_SSH_PORT} -c blowfish -o PreferredAuthentications=publickey" --delete --numeric-ids \
        /var/lib/nethserver/hotsync/mysql/* \
        "root@${REMOTE_HOST}:/var/lib/mysql/"
  fi
fi

#TODO remove mysql files? 
###################################################

XTRA_OPTS=""
if [ "${1:-unset}" == '--dry-run' ]; then
    XTRA_OPTS="--dry-run -v"
fi

#launch backup before rsync
/sbin/e-smith/backup-config

#copy files with rsync
# -q
#    --files-from=${INCLUDE_FILE} --exclude=.ssh/authorized_keys \
/usr/bin/rsync ${XTRA_OPTS} -z -r -a -H -A -e "/usr/bin/ssh -p ${REMOTE_SSH_PORT} -c blowfish -o PreferredAuthentications=publickey" --delete --numeric-ids \
    --files-from=${INCLUDE_FILE} \
    --exclude-from=${EXCLUDE_FILE} \
    / "root@${REMOTE_HOST}:/"

